@page "/courseSchedule"
@using System.Globalization
@using Microsoft.AspNetCore
@using Microsoft.AspNetCore.Components
@using NodaTime
@using static NodaTime.Extensions.DateTimeExtensions;
@using BlazorNodaTimeDateTimePicker

@inject HttpClient Http

@if (_courseScheduleViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <thead>
            <div class="dayEventValue">
                <button class="transparentButtonWhiteText" onclick="@FocusedToElement">
                    @_selectedDate.ToDateTimeUnspecified().ToString("dddd dd MMMM",
             new CultureInfo("ru-RU")).ToUpper()
                </button>

                <div class="d-flex flex-sm-row flex-column">
                    <div class="mr-3 order-1 order-sm-0">
                        <DatePicker Visible="@_isVisibleDatePicker"
                                    SelectedDateChanged=SelectedDateChanged
                                    ShowClose="@true"
                                    Selected=@Selected
                                    FormatProvider="@(new CultureInfo("ru-RU"))"
                                    DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Sunday }) />
                    </div>
                </div>
            </div>
            <tr>
                <th>№</th>
                <th>Предмет</th>
                <th>Тип предмета</th>
                <th>Преподаватель</th>
                <th>Кабинет</th>
                <th>Четность недели</th>
                <th>Номер недели</th>
            </tr>
        </thead>
        <tbody class="table-hover">
            @foreach (var course in _courseScheduleViewModel.CoursesViewModel)
            {
                <tr>
                    <td>@course.CourseNumber</td>
                    <td>@course.CourseName</td>
                    <td>@course.CourseType</td>
                    <td>@course.TeacherFullName</td>
                    <td>@course.CoursePlace</td>
                    <td>@course.ParityWeek</td>
                    <td>@course.NumberWeek</td>
                </tr>
            }
        </tbody>
    </table>

}

@functions {
    LocalDate _selectedDate;
    CourseScheduleViewModel _courseScheduleViewModel;
    bool _isVisibleDatePicker = false;

    protected override async Task OnInitAsync()
    {
        await GetCourseScheduleToday();
    }

    void FocusedToElement()
    {
        _isVisibleDatePicker = true;
    }

    void Selected(LocalDate localDate)
    {
        _selectedDate = localDate;
        _isVisibleDatePicker = false;
        StateHasChanged();
    }

    void SelectedDateChanged(LocalDate? localDate)
    {
        _selectedDate = localDate ?? SystemClock.Instance.GetCurrentInstant().InUtc().LocalDateTime.Date;

        var dateTimeOffset = ConvertLocalDateToDateTimeOffset(localDate);

        _isVisibleDatePicker = false;

        Console.WriteLine(dateTimeOffset);

        GetCourseScheduleSelected(dateTimeOffset);

        StateHasChanged();
    }

    public DateTimeOffset ConvertLocalDateToDateTimeOffset(LocalDate? localDate)
    {
        try
        {
            if (!localDate.HasValue)
            {
                return DateTimeOffset.UtcNow;
            }
            var dateTimeString = localDate.Value.AtMidnight().ToDateTimeUnspecified()
                    .ToString(CultureInfo.InvariantCulture);

            var result = DateTimeOffset.Parse(dateTimeString);

            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return DateTimeOffset.UtcNow;
        }
    }

    public async Task GetCourseScheduleToday()
    {
        _courseScheduleViewModel = await Http.GetJsonAsync<CourseScheduleViewModel>($"{Startup.url}/api/schedule/today");
    }

    public async Task GetCourseScheduleTomorrow()
    {
        _courseScheduleViewModel = await Http.GetJsonAsync<CourseScheduleViewModel>($"{Startup.url}/api/schedule/tomorrow");
    }

    public async Task GetCourseScheduleSelected(DateTimeOffset dateTimeOffset)
    {
        var requestModel = new CourseScheduleRequestModel()
        {
            DateTimeRequest = dateTimeOffset
        };

        _courseScheduleViewModel = await Http.PostJsonAsync<CourseScheduleViewModel>($"{Startup.url}/api/schedule/selected", requestModel);

        Console.WriteLine(_courseScheduleViewModel.NameOfDayWeek
                          + " " + _courseScheduleViewModel.CoursesViewModel.Count);

        StateHasChanged();
    }

    /// <summary>
    /// Модель представления для расписания.
    /// </summary>
    public class CourseScheduleViewModel
    {
        /// <summary>
        /// Название дня недели.
        /// </summary>
        public string NameOfDayWeek { get; set; }

        /// <summary>
        /// Список с данными о днях из расписании.
        /// </summary>
        public List<CoursesViewModel> CoursesViewModel { get; set; }
    }

    /// <summary>
    /// Модель представления с данными о днях из расписании.
    /// </summary>
    public class CoursesViewModel
    {
        /// <summary>
        /// Номер недели.
        /// </summary>
        public string NumberWeek { get; set; }

        /// <summary>
        /// Чётность недели.
        /// </summary>
        public string ParityWeek { get; set; }

        /// <summary>
        /// Название предмета.
        /// </summary>
        public string CourseName { get; set; }

        /// <summary>
        /// Номер предмета.
        /// </summary>
        public int CourseNumber { get; set; }

        /// <summary>
        /// Тип предмета.
        /// </summary>
        public string CourseType { get; set; }

        /// <summary>
        /// Полное имя преподавателя.
        /// </summary>
        public string TeacherFullName { get; set; }

        /// <summary>
        /// Место проведения.
        /// </summary>
        public string CoursePlace { get; set; }
    }

    /// <summary>
    /// Модель запросов на получение расписания.
    /// </summary>
    public class CourseScheduleRequestModel
    {
        /// <summary>
        /// Время, по которому нужно вернуть расписание.
        /// </summary>
        public DateTimeOffset DateTimeRequest { get; set; }
    }

}