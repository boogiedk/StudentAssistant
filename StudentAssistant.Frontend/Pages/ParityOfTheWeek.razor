@page "/parityOfTheWeek"
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using NodaTime
@using static NodaTime.Extensions.DateTimeExtensions;
@using BlazorNodaTimeDateTimePicker

@inject HttpClient Http


@if (_parityOfTheWeekViewModel == null)
{
<p><em>Loading...</em></p>
}
else
{
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@_parityOfTheWeekViewModel.SelectedDateStringValue - @_parityOfTheWeekViewModel.DayOfName</title>
</head>
<body>

    <div class="@_parityStyle">
        <div>
            <h1>
                @_parityOfTheWeekViewModel.SelectedDateStringValue
                <button class="transparentButtonBlackText" onclick="@FocusedToElement">
                    @_parityOfTheWeekViewModel.DateTimeRequest
                </button>
                <b>@_parityOfTheWeekViewModel.DayOfName</b>
            </h1>
            <div class="d-flex flex-sm-row flex-column">
                <div class="mr-3 order-1 order-sm-0">
                    <DatePicker Visible="@_isVisibleDatePicker"
                                SelectedDateChanged=SelectedDateChanged
                                ShowClose="@true"
                                Selected=@Selected
                                FormatProvider="@(new CultureInfo("ru-RU"))"
                                DaysOfWeekDisabled=@(new IsoDayOfWeek[] { IsoDayOfWeek.Sunday })
                                DisplayDaysOfWeek="@true" />
                </div>
            </div>
            <h1> Идёт <b>@_parityOfTheWeekViewModel.ParityOfWeekCount-ая</b> неделя</h1>
            <h1> и <b>@_parityOfTheWeekViewModel.NumberOfSemester</b> (@_parityOfTheWeekViewModel.PartOfSemester половина) семестр</h1>
            <div>
                <h1><b>@_parityOfTheWeekViewModel.ParityOfWeekToday неделя</b></h1>
            </div>
        </div>
        <div>
            <h1><b>@_parityOfTheWeekViewModel.StatusDay</b></h1>
        </div>
    </div>

</body>
</html>
}

@functions {
    static readonly LocalDate DefaultLocalDate = SystemClock.Instance.GetCurrentInstant().InUtc().LocalDateTime.Date;

    LocalDate _selectedDate = DefaultLocalDate;
    bool _isVisibleDatePicker = false;
    ParityOfTheWeekViewModel _parityOfTheWeekViewModel;
    string _parityStyle = string.Empty;

    protected override async Task OnInitAsync()
    {
        var dateTimeOffset = ConvertLocalDateToDateTimeOffset(DefaultLocalDate);

        await GetParityOfTheWeek(dateTimeOffset);

        _parityStyle = $"parity{_parityOfTheWeekViewModel.IsParity}";

        Console.WriteLine(_parityOfTheWeekViewModel.SelectedDateStringValue);
    }

    void FocusedToElement()
    {
        _isVisibleDatePicker = true;
    }

    void Selected(LocalDate localDate)
    {
        _selectedDate = localDate;
        _isVisibleDatePicker = false;
        StateHasChanged();
    }

    void SelectedDateChanged(LocalDate? localDate)
    {
        _selectedDate = localDate ?? DefaultLocalDate;

        var dateTimeOffset = ConvertLocalDateToDateTimeOffset(localDate);

        _isVisibleDatePicker = false;

        GetParityOfTheWeek(dateTimeOffset);

        StateHasChanged();
    }

    public DateTimeOffset ConvertLocalDateToDateTimeOffset(LocalDate? localDate)
    {
        try
        {
            if (!localDate.HasValue)
            {
                return DateTimeOffset.UtcNow;
            }
            var dateTimeString = localDate.Value.AtMidnight().ToDateTimeUnspecified()
                .ToString(CultureInfo.InvariantCulture);

            var result = DateTimeOffset.Parse(dateTimeString);

            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return DateTimeOffset.UtcNow;
        }
    }

    public async Task GetParityOfTheWeek(DateTimeOffset dateTimeOffset)
    {
        var requestModel = new ParityOfTheWeekRequestModel()
        {
            SelectedDateTime = dateTimeOffset
        };

        _parityOfTheWeekViewModel = await Http.PostJsonAsync<ParityOfTheWeekViewModel>($"{Startup.url}/api/v1/parity/selected", requestModel);

        _parityStyle = $"parity{_parityOfTheWeekViewModel.IsParity}";

        StateHasChanged();
    }

    public class ParityOfTheWeekViewModel
    {
        /// <summary>
        /// Время создания запроса на получение данных.
        /// </summary>
        public string DateTimeRequest { get; set; }

        /// <summary>
        /// Хранит <see cref="string"/> true, если неделя чётная, иначе <see cref="string"/> false.
        /// </summary>
        public string ParityOfWeekToday { get; set; }

        /// <summary>
        /// Хранит количество прошедших недель с сентября до <see cref="DateTimeOffset"/> переданного параметра.
        /// </summary>
        public int ParityOfWeekCount { get; set; }

        /// <summary>
        /// Номер части семестра.
        /// </summary>
        public int PartOfSemester { get; set; }

        /// <summary>
        /// Название дня недели.
        /// </summary>
        public string DayOfName { get; set; }

        /// <summary>
        /// Номер семестра.
        /// </summary>
        public int NumberOfSemester { get; set; }

        /// <summary>
        /// Текстовый статус дня: учебный, выходной, каникулы, сессия.
        /// </summary>
        public string StatusDay { get; set; }

        /// <summary>
        /// Хранит <see cref="bool"/> true, если неделя чётная, иначе<see cref="bool"/> false.
        /// </summary>
        public bool IsParity { get; set; }

        /// <summary>
        /// Хранит <see cref="string"/> с значением "Сегодня" или "Выбрано".
        /// </summary>
        public string SelectedDateStringValue { get; set; }
    }

    /// <summary>
    /// Модель для запросов. (!)
    /// </summary>
    public class ParityOfTheWeekRequestModel
    {
        /// <summary>
        /// Выбранная пользователем дата, по которой нужно вывести информацию.
        /// </summary>
        public DateTimeOffset SelectedDateTime { get; set; }
    }
}
